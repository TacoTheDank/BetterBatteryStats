apply plugin: 'com.android.application'
apply plugin: 'com.github.triplet.play'
//apply plugin: 'kotlin-android'
//apply plugin: 'com.google.gms.google-services'

android {
    compileSdkVersion 29
    buildToolsVersion "30.0.3"

    play {
        track.set("beta")
//        untrackOld = true // will untrack 'alpha' while upload to 'beta'
        serviceAccountCredentials.set(file("sa-google-play.json"))
    }

    defaultConfig {
        applicationId "com.asksven.betterbatterystats"
        minSdkVersion 15
        targetSdkVersion 29
        versionCode 99
        versionName "2.6"
        versionNameSuffix = getBuildSuffix()
        vectorDrawables.useSupportLibrary true
        testBuildType "debug"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    signingConfigs {
        release {
            storeFile file(System.getenv("KEYSTORE_RELEASE") ?: "app.keystore")
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }
        debug {
            if (file(System.getenv("KEYSTORE_DEBUG") ?: "app.keystore").exists()) {
                storeFile = file(System.getenv("KEYSTORE_DEBUG") ?: "app.keystore")
            }
        }
    }

    // we have different package name for the variants
    flavorDimensions "edition"
    productFlavors {
        gplay {
            dimension "edition"
            applicationId "com.asksven.betterbatterystats"
            signingConfig signingConfigs.release
//            playAccountConfig = playAccountConfigs.defaultAccountConfig
        }
        xdaedition {
            dimension "edition"
            applicationId "com.asksven.betterbatterystats_xdaedition"
            signingConfig signingConfigs.debug
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        // To check for a certain build type, use variant.buildType.name == "<buildType>"
        if (names.contains("gplay") && variant.buildType.name == "debug") {
            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
        }

        // for XDA edition we want to be able to build both debug and release version
    }

    // and a naming policy for the APKs
    applicationVariants.all { variant ->
        variant.outputs.all {
            def project = "betterbatterystats"
            def SEP = "_"
            def flavor = variant.productFlavors[0].name
            def buildType = variant.buildType.name
            // update gradle // def buildType = variant.variantData.variantConfiguration.buildType.name
            def version = variant.versionName

            def newApkName = project + SEP + flavor + SEP + buildType + SEP + version + ".apk"
            outputFileName = newApkName
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            debuggable true
            signingConfig signingConfigs.debug
        }
    }

    compileOptions {
        encoding "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/*'
    }

    lintOptions {
        disable 'MissingTranslation'
        abortOnError false
    }
}

dependencies {
    implementation files('libs/RootShell-1.6.aar')
    implementation files('libs/RootTools-5.0.aar')

// Kotlin
//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

// AndroidX
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.core:core:1.0.0'
    implementation 'androidx.fragment:fragment:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'

// Third-party
    implementation 'de.cketti.library.changelog:ckchangelog:1.2.2'
    implementation 'com.google.android.apps.dashclock:dashclock-api:2.0.0'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'org.codehaus.jackson:jackson-core-asl:1.9.13'
    implementation 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
    implementation 'com.twofortyfouram:android-plugin-client-sdk-for-locale:4.0.3'

// Testing
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.powermock:powermock-api-mockito:1.6.5'
    testImplementation 'org.powermock:powermock-module-junit4:1.6.5'
    // for local tests (app/src/test)
    // Required for instrumented tests (app/src/androidTest)
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.1.1'
}

def getBuildSuffix() {
    def ret = ""
    def buildNumber = System.getenv("CIRCLE_BUILD_NUM")
    if (buildNumber != null) {
        ret = "-" + buildNumber
    }

    println ">>>>> Build number: \"" + ret + "\""
    return ret
}
